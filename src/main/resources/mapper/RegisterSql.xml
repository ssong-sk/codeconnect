<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.code.mapper.RegisterMapperInter">
   <insert id="insertRegister" parameterType="RDto">
     insert into register (r_id,r_pass,r_name,r_nickname,r_birthday,r_hp,r_zipcode,r_addr,r_addr_detail,r_email,r_gender,r_gaipday,r_job,r_exp,r_sogae) 
     values (#{r_id },#{r_pass },#{r_name },#{r_nickname },#{r_birthday },#{r_hp },#{r_zipcode },#{r_addr },#{r_addr_detail },
     #{r_email },#{r_gender },now(),#{r_job },#{r_exp },#{r_sogae })
   </insert>
   <select id="getAllRegister" resultType="RDto">
      select * from register order by r_id
   </select>
   <select id="getSearchId" parameterType="String" resultType="int">
      select count(*) from register where r_id=#{r_id}
   </select>
   <select id="getName" parameterType="String" resultType="String">
     select r_name from register where r_id=#{r_id}
   </select>
   <select id="loginIdPassCheck" parameterType="Map" resultType="int">
      select count(*) from register where r_id=#{r_id} and r_pass=#{r_pass}
   </select>
   <select id="getDataById" parameterType="String" resultType="RDto">
      select * from register where r_id=#{r_id}
   </select>
   <select id="getDataByNum" parameterType="String" resultType="RDto">
      select * from register where r_num=#{r_num}
   </select>
    <select id="countById" resultType="int">
        SELECT COUNT(*) FROM register WHERE r_id = #{r_id}
    </select>
    <select id="countByNickname" parameterType="String" resultType="int">
    	select count(*) from register where r_nickname = #{r_nickname}
    </select>
    
    
    
    
    <select id="getSearchName" parameterType="String" resultType="RDto">
    	select r_name from register where r_id = #{r_id}
    </select>
    <select id="getSearchHp" parameterType="String" resultType="RDto">
    	select r_hp from register where r_hp = #{r_hp}
    </select>
    
    <update id="getUpdateName" parameterType="String">
    	update register set r_name = #{r_name} where r_num = #{r_num}
    </update>
    <update id="getUpdateHp" parameterType="String">
    	update register set r_hp = #{r_hp} where r_num = #{r_num}
    </update>
    <update id="getUpdateExp" parameterType="String">
    	update register set r_exp = #{r_exp} where r_num = #{r_num}
    </update>
    <update id="getUpdateJob" parameterType="String">
    	update register set r_job = #{r_job} where r_num = #{r_num}
    </update>
    <update id="getUpdateDescription" parameterType="String">
    	update register set r_sogae = #{r_sogae} where r_num = #{r_num}
    </update>
    
    <delete id="deleteRegister" parameterType="String">
    	delete from register where r_num = #{r_num }
    </delete>
    
    
 <!-- 스크랩 -->
<insert id="scrapInsertReg" parameterType="hdto">
	insert into scrap (h_num, r_num) values(#{h_num}, #{r_num})
</insert>

<delete id="scrapDeleteReg" parameterType="map">
    DELETE FROM scrap WHERE r_num = #{r_num} AND h_num = #{h_num}
</delete>

<select id="scrapSelectReg" resultType="hdto">
    select * from scrap where s_num = #{s_num}
</select>

<select id="getUserScrapsReg" parameterType="int" resultType="hdto">
    SELECT h_num FROM scrap WHERE r_num = #{r_num}
</select>

<select id="getRnumByIdReg" parameterType="String" resultType="int">
	select r_num from register where r_id=#{r_id}
</select>

<select id="getScrapCountReg" parameterType="int" resultType="int">
     select count(*) from scrap where r_num = #{r_num}
</select>

<select id="getScrapList" parameterType="int" resultType="int">
	select * from scrap where r_num = #{r_num}
</select>

<!-- r_num으로 pe-num 구하기 -->
<select id="getpenum" parameterType="String" resultType="int">
    SELECT COALESCE(
        (
            SELECT pe_num
            FROM personal
            WHERE r_num = #{r_num}
            ORDER BY pe_writeday DESC
            LIMIT 1
        ),
        0  -- 기본값: 만약 결과가 없는 경우 반환할 값
    ) AS pe_num
</select>


<!-- 이력서 작성 상태 조회(학력, 고등학교) -->
<select id="getwritemiddle" parameterType="int" resultType="int">
    SELECT COALESCE(
        (
            SELECT 
                (CASE WHEN sc_category IS NOT NULL AND sc_category != '' THEN 1 ELSE 0 END +
                 CASE WHEN sc_hi_name IS NOT NULL AND sc_hi_name != '' THEN 1 ELSE 0 END +
                 CASE WHEN sc_hi_check IS NOT NULL AND sc_hi_check != '' THEN 1 ELSE 0 END +
                 CASE WHEN sc_hi_iphack IS NOT NULL AND sc_hi_iphack != '' THEN 1 ELSE 0 END +
                 CASE WHEN sc_hi_jolup IS NOT NULL AND sc_hi_jolup != '' THEN 1 ELSE 0 END +
                 CASE WHEN sc_hi_major IS NOT NULL AND sc_hi_major != '' THEN 1 ELSE 0 END
                ) AS filled_columns
            FROM school
            WHERE pe_num = #{pe_num}
            ORDER BY sc_num DESC LIMIT 1
        ),
        0  -- 기본값
    ) AS result
</select>


<!-- 이력서 작성 상태 조회(학력, 대학교) -->
<select id="getwriteuni" parameterType="int" resultType="int">
    SELECT COALESCE(
        (
            SELECT 
                (CASE WHEN sc_uni_category IS NOT NULL AND sc_uni_category != '' THEN 1 ELSE 0 END +
                 CASE WHEN sc_uni_name IS NOT NULL AND sc_uni_name != '' THEN 1 ELSE 0 END +
                 CASE WHEN sc_uni_major IS NOT NULL AND sc_uni_major != '' THEN 1 ELSE 0 END +
                 CASE WHEN sc_uni_check IS NOT NULL AND sc_uni_check != '' THEN 1 ELSE 0 END +
                 CASE WHEN sc_uni_iphack IS NOT NULL AND sc_uni_iphack != '' THEN 1 ELSE 0 END +
                 CASE WHEN sc_uni_jolup IS NOT NULL AND sc_uni_jolup != '' THEN 1 ELSE 0 END +
                 CASE WHEN sc_uni_grade IS NOT NULL AND sc_uni_grade != '' THEN 1 ELSE 0 END +
                 CASE WHEN sc_uni_sum IS NOT NULL AND sc_uni_sum != '' THEN 1 ELSE 0 END
                ) AS filled_columns
            FROM school
            WHERE pe_num = #{pe_num}
            ORDER BY sc_num DESC LIMIT 1
        ),
        0  -- 기본값
    ) AS result
</select>


<!-- 이력서 작성 상태 조회(경력) -->
<select id="getwritecareer" parameterType="int" resultType="integer">
	SELECT 
		(CASE WHEN ca_name IS NOT NULL AND ca_name != '' THEN 1 ELSE 0 END +
	     CASE WHEN ca_ipsa IS NOT NULL AND ca_ipsa != '' THEN 1 ELSE 0 END +
	     CASE WHEN ca_resign IS NOT NULL AND ca_resign != '' THEN 1 ELSE 0 END +
	     CASE WHEN ca_work IS NOT NULL AND ca_work != '' THEN 1 ELSE 0 END +
	     CASE WHEN ca_position IS NOT NULL AND ca_position != '' THEN 1 ELSE 0 END +
	     CASE WHEN ca_content IS NOT NULL AND ca_content != '' THEN 1 ELSE 0 END
	    ) AS filled_columns
	FROM career
	WHERE pe_num = #{pe_num}
	ORDER BY ca_num DESC LIMIT 1
</select>

</mapper>